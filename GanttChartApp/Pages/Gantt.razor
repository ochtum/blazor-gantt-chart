@page "/gantt"
@using GanttChartApp.Models
@using Microsoft.JSInterop
@using System.Collections.Generic
@using System

<h3>ガントチャート</h3>

<div class="gantt-header">
    <button class="btn btn-primary" @onclick="AddTask">+ タスク追加</button>
    <button class="btn btn-secondary" @onclick="SaveJson">保存</button>
    <input type="file" @onchange="LoadJson" />
    <span class="ms-3">表示範囲:</span>
    <select @bind="calendarRange" class="form-select d-inline-block w-auto ms-1">
        <option value="week">今日から1週間</option>
        <option value="month">月初から1か月</option>
        <option value="3months">月初から3か月</option>
        <option value="tasks">タスク期間</option>
    </select>
</div>

<div class="gantt-main">
    <div class="task-list">
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>タスク</th>
                    <th>担当者</th>
                    <th>開始日</th>
                    <th>終了日</th>
                    <th>進捗率</th>
                    <th>操作</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in Tasks)
                {
                    <tr>
                        <td><input value="@task.Name" @onchange="e => UpdateTask(task, nameof(task.Name), e.Value?.ToString())" /></td>
                        <td><input value="@task.Assignee" @onchange="e => UpdateTask(task, nameof(task.Assignee), e.Value?.ToString())" /></td>
                        <td><input type="date" value="@task.StartDate.ToString("yyyy-MM-dd")" @onchange="@(e => UpdateTask(task, nameof(task.StartDate), ((ChangeEventArgs)e).Value?.ToString()))" /></td>
                        <td><input type="date" value="@task.EndDate.ToString("yyyy-MM-dd")" @onchange="@(e => UpdateTask(task, nameof(task.EndDate), ((ChangeEventArgs)e).Value?.ToString()))" /></td>
                        <td><input type="number" min="0" max="100" value="@task.Progress" @onchange="e => UpdateTask(task, nameof(task.Progress), e.Value?.ToString())" /></td>
                        <td><button class="btn btn-danger btn-sm" @onclick="() => RemoveTask(task)">🗑</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="timeline" style="overflow-x:auto; background:#f8f9fa; padding:16px;">
        @if (Tasks.Count > 0 || calendarRange != "tasks")
        {
            DateTime minDate, maxDate;
            var today = DateTime.Today;
            if (calendarRange == "week")
            {
                minDate = today;
                maxDate = today.AddDays(6);
            }
            else if (calendarRange == "month")
            {
                minDate = new DateTime(today.Year, today.Month, 1);
                maxDate = minDate.AddMonths(1).AddDays(-1);
            }
            else if (calendarRange == "3months")
            {
                minDate = new DateTime(today.Year, today.Month, 1);
                maxDate = minDate.AddMonths(3).AddDays(-1);
            }
            else // tasks
            {
                minDate = Tasks.Min(t => t.StartDate);
                maxDate = Tasks.Max(t => t.EndDate);
            }
            var days = (maxDate - minDate).Days + 1;
            var rowHeight = 32;
            var barHeight = 16;
            var barYOffset = 8;
            var dayWidth = 32;
            var svgWidth = days * dayWidth + 100;
            var svgHeight = Tasks.Count * rowHeight + 40;

            // 表示範囲内のタスクのみ抽出
            var visibleTasks = Tasks
                .Select((t, idx) => new { Task = t, Index = idx })
                .Where(x => x.Task.EndDate >= minDate && x.Task.StartDate <= maxDate)
                .ToList();

            <svg width="@svgWidth" height="@svgHeight">
                <!-- 日付ヘッダー -->
                @for (int d = 0; d < days; d++)
                {
                    var date = minDate.AddDays(d);
                    var x = d * dayWidth + 100;
                    <rect x="@x" y="0" width="@dayWidth" height="@rowHeight" fill="@(date == DateTime.Today ? "#ffeeba" : (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday ? "#e9ecef" : "#fff"))" stroke="#dee2e6" />
                    <g text-anchor="middle">
                        <text x="@(x + dayWidth/2)" y="20" font-size="12">@date.ToString("MM/dd")</text>
                    </g>
                }
                <!-- 今日の縦線 -->
                @if (minDate <= DateTime.Today && DateTime.Today <= maxDate)
                {
                    var todayX = (DateTime.Today - minDate).Days * dayWidth + 100;
                    <line x1="@todayX" y1="0" x2="@todayX" y2="@svgHeight" stroke="#ff9800" stroke-width="2" />
                }
                <!-- タスクバー -->
                @for (int vi = 0; vi < visibleTasks.Count; vi++)
                {
                    var t = visibleTasks[vi].Task;
                    var i = visibleTasks[vi].Index; // Tasksリスト上のインデックス
                    var startX = (t.StartDate < minDate ? 0 : (t.StartDate - minDate).Days) * dayWidth + 100;
                    var endX = (t.EndDate > maxDate ? (maxDate - minDate).Days : (t.EndDate - minDate).Days) * dayWidth + 100 + dayWidth;
                    var y = (vi + 1) * rowHeight;
                    // バー本体
                    <rect x="@startX" y="@(y + barYOffset)" width="@(endX - startX)" height="@barHeight" fill="#90caf9" stroke="#1976d2" rx="4"
                        style="cursor:move"
                        @onmousedown="e => OnBarMouseDown(i, e.ClientX, minDate, dayWidth)"
                    />
                    // 左端リサイズハンドル（幅を32pxに拡大、バーの上下にも余裕を持たせる）
                    <rect x="@(startX - 16)" y="@(y + barYOffset - 8)" width="32" height="@(barHeight + 16)" fill="transparent"
                        style="cursor:ew-resize"
                        @onmousedown="e => OnBarResizeMouseDown(i, e.ClientX, minDate, dayWidth, true)"
                    />
                    // 右端リサイズハンドル（幅を32pxに拡大、バーの上下にも余裕を持たせる）
                    <rect x="@(endX - 16)" y="@(y + barYOffset - 8)" width="32" height="@(barHeight + 16)" fill="transparent"
                        style="cursor:ew-resize"
                        @onmousedown="e => OnBarResizeMouseDown(i, e.ClientX, minDate, dayWidth, false)"
                    />
                    // 進捗率
                    <rect x="@startX" y="@(y + barYOffset)" width="@((endX - startX) * t.Progress / 100)" height="@barHeight" fill="#43a047" rx="4" />
                    // タスク名
                    <g>
                        <text x="90" y="@(y + barYOffset + barHeight - 2)" font-size="12" text-anchor="end">@t.Name</text>
                    </g>
                }
                <!-- SVG全体でドラッグ追従 -->
                @if (draggingTaskIndex != null || resizingTaskIndex != null)
                {
                    <rect id="test" x="0" y="0" width="@svgWidth" height="@svgHeight" fill="transparent"
                        @onmousemove="e => OnBarMouseMove(e.ClientX, minDate, dayWidth)"
                        @onmouseup="e => OnBarMouseUp()" />
                }
                <!-- ＋アイコン -->
                <g @onclick="AddTask" style="cursor:pointer">
                    <circle cx="50" cy="@(svgHeight - 30)" r="14" fill="#1976d2" />
                    <text x="50" y="@(svgHeight - 25)" text-anchor="middle" font-size="20" fill="#fff" font-weight="bold">＋</text>
                </g>
            </svg>
        }
        else
        {
            <p>タスクを追加してください。</p>
        }
    </div>
</div>

@code {
    string calendarRange = "week";
    List<GanttTask> Tasks = new();
    int nextId = 1;
    int? draggingTaskIndex = null;
    double dragStartX = 0;
    DateTime dragStartDate;
    int dragBarDays = 0;
    bool isResizing = false;
    bool resizeIsLeft = false;
    int? resizingTaskIndex = null;
    double resizeStartX = 0;
    DateTime resizeStartDate;
    DateTime resizeEndDate;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasksFromLocalStorage();
    }

    async Task LoadTasksFromLocalStorage()
    {
        var json = await JS.InvokeAsync<string>("ganttLocalStorage.load", "gantt-tasks");
        if (!string.IsNullOrEmpty(json))
        {
            try
            {
                var loaded = System.Text.Json.JsonSerializer.Deserialize<List<GanttTask>>(json);
                if (loaded != null)
                {
                    Tasks = loaded;
                    nextId = Tasks.Count > 0 ? Tasks.Max(t => t.Id) + 1 : 1;
                }
            }
            catch { }
        }
    }

    void SaveTasksToLocalStorage()
    {
        var json = System.Text.Json.JsonSerializer.Serialize(Tasks);
        JS.InvokeVoidAsync("ganttLocalStorage.save", "gantt-tasks", json);
    }

    void AddTask()
    {
        Tasks.Add(new GanttTask
        {
            Id = nextId++,
            Name = "新しいタスク",
            Assignee = "",
            StartDate = DateTime.Today,
            EndDate = DateTime.Today.AddDays(1),
            Progress = 0
        });
        SaveTasksToLocalStorage();
    }

    void RemoveTask(GanttTask task)
    {
        Tasks.Remove(task);
        SaveTasksToLocalStorage();
    }

    void UpdateTask(GanttTask task, string property, string? value)
    {
        if (property == nameof(task.Name)) task.Name = value ?? "";
        if (property == nameof(task.Assignee)) task.Assignee = value ?? "";
        if (property == nameof(task.StartDate) && DateTime.TryParse(value, out var sd)) task.StartDate = sd;
        if (property == nameof(task.EndDate) && DateTime.TryParse(value, out var ed)) task.EndDate = ed;
        if (property == nameof(task.Progress) && int.TryParse(value, out var prg)) task.Progress = prg;
        SaveTasksToLocalStorage();
    }

    async void SaveJson()
    {
        var json = System.Text.Json.JsonSerializer.Serialize(Tasks);
        var bytes = System.Text.Encoding.UTF8.GetBytes(json);
        var fileName = $"GANT{DateTime.Now:yyyyMMddHHmmss}.json";
        await JS.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(bytes));
    }

    async void LoadJson(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            // 実装はJSInteropでファイル読込を行う必要あり
        }
    }

    void OnBarMouseDown(int taskIndex, double mouseX, DateTime minDate, int dayWidth)
    {
        draggingTaskIndex = taskIndex;
        dragStartX = mouseX;
        dragStartDate = Tasks[taskIndex].StartDate;
        dragBarDays = (Tasks[taskIndex].EndDate - Tasks[taskIndex].StartDate).Days;
    }

    void OnBarResizeMouseDown(int taskIndex, double mouseX, DateTime minDate, int dayWidth, bool isLeft)
    {
        isResizing = true;
        resizeIsLeft = isLeft;
        resizingTaskIndex = taskIndex;
        resizeStartX = mouseX;
        resizeStartDate = Tasks[taskIndex].StartDate;
        resizeEndDate = Tasks[taskIndex].EndDate;
    }

    void OnBarMouseMove(double mouseX, DateTime minDate, int dayWidth)
    {
        if (isResizing && resizingTaskIndex is int idx)
        {
            // 1pxでも動いたら1日分反応するように修正
            int diffDays = 0;
            if (resizeIsLeft)
            {
                var delta = mouseX - resizeStartX;
                if (Math.Abs(delta) >= 1)
                {
                    diffDays = (int)Math.Floor(delta / dayWidth);
                    if (delta > 0) diffDays = Math.Max(1, diffDays); // 右へ1px以上動いたら+1日
                    if (delta < 0) diffDays = Math.Min(-1, diffDays); // 左へ1px以上動いたら-1日
                }
                var newStart = resizeStartDate.AddDays(diffDays);
                if (newStart < resizeEndDate)
                {
                    Tasks[idx].StartDate = newStart;
                    SaveTasksToLocalStorage();
                }
            }
            else
            {
                var delta = mouseX - resizeStartX;
                if (Math.Abs(delta) >= 1)
                {
                    diffDays = (int)Math.Ceiling(delta / dayWidth);
                    if (delta > 0) diffDays = Math.Max(1, diffDays); // 右へ1px以上動いたら+1日
                    if (delta < 0) diffDays = Math.Min(-1, diffDays); // 左へ1px以上動いたら-1日
                }
                var newEnd = resizeEndDate.AddDays(diffDays);
                if (resizeStartDate < newEnd)
                {
                    Tasks[idx].EndDate = newEnd;
                    SaveTasksToLocalStorage();
                }
            }
        }
        else if (draggingTaskIndex is int idx2)
        {
            var diffDays = (int)Math.Round((mouseX - dragStartX) / dayWidth);
            var newStart = dragStartDate.AddDays(diffDays);
            var newEnd = newStart.AddDays(dragBarDays);
            if (newStart <= newEnd)
            {
                Tasks[idx2].StartDate = newStart;
                Tasks[idx2].EndDate = newEnd;
                SaveTasksToLocalStorage();
            }
        }
    }

    void OnBarMouseUp()
    {
        draggingTaskIndex = null;
        isResizing = false;
        resizingTaskIndex = null;
    }

    [Inject] IJSRuntime JS { get; set; } = default!;
}
